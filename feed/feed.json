{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "!important",
	"language": "en",
	"home_page_url": "https://david-way.github.io/",
	"feed_url": "https://david-way.github.io/feed/feed.json",
	"description": "I am writing about my not important experiences.",
	"author": {
		"name": "David Way",
		"url": "https://david-way.github.io/about-me/"
	},
	"items": [
		{
			"id": "https://david-way.github.io/blog/ux-of-a-disabled-button/",
			"url": "https://david-way.github.io/blog/ux-of-a-disabled-button/",
			"title": "The User Experience of Disabled Buttons",
			"content_html": "<h2 id=\"should-you-use-disabled-buttons\" tabindex=\"-1\">Should you use disabled buttons? <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/ux-of-a-disabled-button/\">#</a></h2>\n<p>There are two reasons why disabling a button is best avoided.</p>\n<h3 id=\"1-state-identification\" tabindex=\"-1\">1. State Identification <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/ux-of-a-disabled-button/\">#</a></h3>\n<p>The difference between a disabled button and a regular button is usually very subtle<sup>*</sup>, meaning it’s a weak indicator of state that may be missed by many of your users.</p>\n<p><i>* Designing something to look both disabled and identifiable as a button while achieving adequate contrast is tricky.</i></p>\n<h4 id=\"1-1-what-does-it-mean-to-disable-a-button-from-a-screen-readers-perspective\" tabindex=\"-1\">1.1 What does it mean to disable a button from a Screen Readers perspective? <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/ux-of-a-disabled-button/\">#</a></h4>\n<details>\n  <summary>ℹ️ What is a <i>Screen Reader</i>?</summary>\n<p>A screen reader is assistive software, primarily used by people with low or no vision. It converts the semantic elements on a web page (for example text, buttons, images and links) into audible speech or braille.</p>\n</details>\n<p>A disabled button is non-existent to a Screen Reader user, meaning they don’t even get the weak indicator afforded to fully sighted users.</p>\n<blockquote>\n<p>According to the <a href=\"https://www.who.int/en/news-room/fact-sheets/detail/blindness-and-visual-impairment\">World Health Organization</a>, there are an estimated 285 million people in the world who suffer from some level of visual impairment (including anyone from legally blind, to those with less than 20/20 vision).</p>\n</blockquote>\n<h3 id=\"2-unnecessary-cognitive-load\" tabindex=\"-1\">2. Unnecessary Cognitive Load <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/ux-of-a-disabled-button/\">#</a></h3>\n<p>When a disabled button is intended to act as a visual indicator that something on the page or form needs to be fixed/changed before your user can continue.\nTo those who can identify them, this usage of a disabled button simply tells them “something” is wrong and provides no more information on exactly what needs to be corrected (the user may assume that something is wrong with the application and it that needs to be reloaded).</p>\n<p>The change required to re-enable a disabled control may be appear to be a simple puzzle for your user but this is an assumption we shouldn't make for all our users.\nIntroducing this, potentially, small frustration for users with or without cognitive disabilities or  even familiarity with our product is best avoided in keeping with the &quot;Don't make me think&quot; principle.</p>\n<p>Due to the contrast issues mentioned before, you can't rely on the contents of the buttons label to aid your user here as they may not be able to read it.</p>\n<h2 id=\"is-there-another-way\" tabindex=\"-1\">Is there another way? <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/ux-of-a-disabled-button/\">#</a></h2>\n<p>There are more suitable patterns and approaches available that can help us avoid using disabled buttons.\nFor example let's look at the commonly approach of using a disabled button to prevent progress on an in-complete form.</p>\n<p>❌ Don't</p>\n<ul>\n<li>Disable the submit button (hoping your user understands that you mean for them to fully complete the form before continuing)</li>\n</ul>\n<p>✅ Do</p>\n<ul>\n<li>Mark all required fields (unless all fields are required or there are more optional fields than required)</li>\n<li>Let the user interact with and traverse the form, and identify the enabled submit/continue button (both by its label and location)</li>\n<li>Let them attempt to submit the form</li>\n<li>Inform the user exactly what issue is preventing them from continuing. This can be inline error message or something like the Toast alert pattern</li>\n</ul>\n<p>In other words, allow and use the users premature interaction with the control as an opportunity to inform or guide them how to continue.\nThis principle can be applied to many instances in which disabled buttons are commonly used.</p>\n<!-- ## When should a disabled button be used\n\n![animation showing an asynchronous action triggered by a button temporarily disabling a button](https://raw.github.ibm.com/DWay/not-important/master/src/images/posts/ux-disabled-buttons/disable-button-pattern.gif) -->",
			"date_published": "2021-10-11T00:00:00Z"
		}
		,
		{
			"id": "https://david-way.github.io/blog/how-cpus-are-made/",
			"url": "https://david-way.github.io/blog/how-cpus-are-made/",
			"title": "How CPUs are made",
			"content_html": "<p><em>Or</em>, how we trick rocks into doing math for us.</p>\n<h3 id=\"computer-aided-design-cad\" tabindex=\"-1\">Computer-Aided Design (CAD) <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/how-cpus-are-made/\">#</a></h3>\n<p>The first step of designing a CPU is to select an instruction set and execution paradigm (referred to as the micro-architecture of the CPU). The micro-architecture for a specific application (for example, general-purpose consumer use, enterprise-grade, scientific computing, or embedded system) and a suitable performance level.</p>\n<p>The implementation logic of the CPU is constructed by abstract specification of desired circuit behavior\nthrough the selection of appropriate components e.g. Arithmetic Logic Units (ALU), registers, and cache memory and clocks.\nThe CAD software translates these specifications into the required circuits, logic devices, and logic gates and ultimately the transistors that make them. These elements are printed, in layers, to the silicone. The design is also analyzed and simulated to assess manufacturability and design integrity.</p>\n<h3 id=\"masking-and-fabrication\" tabindex=\"-1\">Masking and Fabrication <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/how-cpus-are-made/\">#</a></h3>\n<p>Manufacturing transistors, at the required scale and precision the achieve the modern CPU performance levels, is not possible with typical manufacturing processes. Even the most precise 3D printers are not suitable for the nano-metre scale of today’s chips. Photolithography is a multi-step process of using light to print or etch the design of many chips onto a thin silicon wafer.</p>\n<p>The printing process begins in a sterile environment by applying hydrogen peroxide to a substrate to remove any contaminants. A thin layer of silicon is deposited on the substrate and spun to uniformly cover it in another layer of photo-resistant chemical which is then baked into place. This layer is less than 2 micro-metres thick. A photo mask of the chip design is placed above the wafer and an extreme intensity UV light source is focused through it. This projects an image of the design that exposes and chemically alters the photoresist where the light reaches it. The photoresist is then treated to develop the exposed regions, preventing further light-induced alteration, and washed away from the unexposed regions. A chemical is used to remove the uppermost layer of the substrate not covered by the photoresist mask, etching the design into the wafer. The photoresist is removed, the surface is polished, and the process is repeated in as many layers as needed to complete the chip design.</p>\n<h2 id=\"packaging\" tabindex=\"-1\">Packaging <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/how-cpus-are-made/\">#</a></h2>\n<p>The delicate silicone die added to a carrier is attached to the printed circuit board (PCB) allowing it to connect, via a pin and socket, to the rest of the computer system. A heat-spreading component is mounted on top to transfer heat away from the circuits.</p>\n<h2 id=\"testing-and-binning\" tabindex=\"-1\">Testing and Binning <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/how-cpus-are-made/\">#</a></h2>\n<p>CPUs are very complex and rely on an incredible level of precision on a microscopic scale. A lot of effort is put into avoiding defects but when they do occur, binning is used to mitigate waste. If the defect occurs in a redundant or non-essential component of the CPU like a core, that component is disabled and the CPU is sold as a lower-end part.</p>\n<p>The CPUs are then packaged for retail to customers or sold to OEMs for inclusion in their products.</p>\n",
			"date_published": "2021-07-07T00:00:00Z"
		}
		,
		{
			"id": "https://david-way.github.io/blog/quick-start-guide-to-yaml/",
			"url": "https://david-way.github.io/blog/quick-start-guide-to-yaml/",
			"title": "Quick-start guide to using Yaml",
			"content_html": "<h2 id=\"definitions\" tabindex=\"-1\">Definitions <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<details>\n  <summary>A <strong>file</strong> is and object on a computer that is used to store data or information. </summary>\n<p>There are many types of files, recognisable by their extension (ie. <code>.doc</code>, <code>.pdf</code>,  <code>.jpg</code>).\nDifferent file types are optimised for different tasks, like storing video, audio, text, configurations or computer instructions (code).</p>\n</details>\n<details>\n  <summary>A <strong>markup up language</strong> is a system of writing content so that it’s structure conveys meaning.</summary>\n<p>Yaml is a data serialization language and not technically a markup language though it functions a lot like one.</p>\n<p>Other markup languages you might be familiar with are HTML, XML and JSON.</p>\n<p>When you compare Yaml structure to other similar systems Yaml requires considerably less content or &quot;decoration&quot; to carry the same amount of information, but is less resilient regarding spacing and formatting as a result.</p>\n  <table>\n  <thead>\n    <tr>\n      <th align=\"left\">Yaml</th>\n      <th align=\"left\">XML</th>\n      <th align=\"left\">JSON</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"vertical-align:top\">\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token key atrule\">People</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Bob\n    <span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>\n    <span class=\"token key atrule\">address</span><span class=\"token punctuation\">:</span> Wicklow<span class=\"token punctuation\">,</span> Ireland</code></pre>\n<p></p></td>\n<td style=\"vertical-align:top\"><p></p>\n<pre class=\"language-xml\" tabindex=\"0\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>People</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Person</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Bob<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>age</span><span class=\"token punctuation\">></span></span>30<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>age</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span><span class=\"token punctuation\">></span></span>Wicklow, Ireland<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>address</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Person</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>People</span><span class=\"token punctuation\">></span></span></code></pre>\n<p></p></td>\n<td style=\"vertical-align:top\"><p></p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"People\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"address\"</span><span class=\"token operator\">:</span> \"Wicklow<span class=\"token punctuation\">,</span> Ireland\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p></p></td>\n</tr><p></p>\n  </tbody>\n</table>\n</details>\n<h2 id=\"yaml\" tabindex=\"-1\">Yaml <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<p>Yaml is a markup like language (used in the <code>.yaml</code> file type) that aims to make data portable in a way that is easy to read, write and edit by humans <em>and</em> computers.</p>\n<p>A Yaml document contains fields to store different types of data and aims to use compact formats to describe more complex data structures (eg. lists of items and maps).</p>\n<h2 id=\"yaml-structure\" tabindex=\"-1\">Yaml structure <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<p>The three dashes <code>---</code> are used to signal the start and end of a Yaml document.</p>\n<p>You structure a YAML document with white-spaces. This means indentation (spaces) and new lines are crucial to a correctly structured Yaml document (always use spaces not tabs). Unless otherwise indicated, newlines indicate the end of a field.</p>\n<h2 id=\"key-value-pairs\" tabindex=\"-1\">Key value pairs <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<p>The simplest and most common field you’ll see in a <code>.yaml</code> file is a key-value pair.</p>\n<p>Key-value pairs are used for labelling (the key) single pieces of data (the value), like a piece of text or a number.</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token punctuation\">---</span>\n<span class=\"token comment\"># Example of `key: value` pair</span>\n<span class=\"token comment\"># Note that a space after the colon is mandatory</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Joan smith\n<span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32</span>\n<span class=\"token punctuation\">---</span></code></pre>\n<details>\n  <summary markdown=\"span\">What is the value data of writing like this?</summary>\n  <br>\n  A computer can read and use structured data written like this a lot easier than the following:\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">It's Joan Smiths 32nd birthday today.</code></pre>\n<p>Again, the key aim of Yaml is to be portable, meaning that it can be easily imported, understood by multiple programs and in programming languages.</p>\n</details> \n<h2 id=\"blocks-of-text\" tabindex=\"-1\">Blocks of text <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<p>To store a literal block of text using the pipe (<code>|</code>) character. New lines are preserved within the block.</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token key atrule\">literal_block</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n    This entire block of text will be the value of the 'literal_block' key,\n    with line breaks being preserved.</span>\n\n    The literal continues until de<span class=\"token punctuation\">-</span>dented<span class=\"token punctuation\">,</span> and the leading indentation is\n    stripped.</code></pre>\n<h2 id=\"comments\" tabindex=\"-1\">Comments <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<p>Comments begin with a pound or hash sign (<code>#</code>). A comment is a programmer-readable explanation or annotation of data. It is ignored by the application.</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token comment\"># This is a full line comment, humans only... 🤖</span>\n<span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> value</code></pre>\n<h2 id=\"lists\" tabindex=\"-1\">Lists <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<p>List or arrays are lines that begin at the same indentation level, starting with a dash followed by a space. A list groups multiple values into the same field.</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token comment\"># Here is a list of names grouped into a \"name\" field</span>\n<span class=\"token key atrule\">names</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"Jane\"</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"John\"</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"Jill\"</span></code></pre>\n<p>or</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token comment\"># This is an alternative format to achieve the same thing. </span>\n<span class=\"token comment\"># Arrays are often represented using square brackets []</span>\n<span class=\"token key atrule\">names</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"Jane\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jill\"</span> <span class=\"token punctuation\">]</span></code></pre>\n<h2 id=\"dictionary-list\" tabindex=\"-1\">Dictionary List <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<p>A dictionary groups more complex values into a single field.</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token comment\"># This is a collection of two link fields</span>\n<span class=\"token comment\"># Each associated with its own label and url fields</span>\n<span class=\"token key atrule\">links</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Home'</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'./home'</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'About'</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'/about'</span></code></pre>\n",
			"date_published": "2021-04-07T00:00:00Z"
		}
		,
		{
			"id": "https://david-way.github.io/blog/thirdpost/",
			"url": "https://david-way.github.io/blog/thirdpost/",
			"title": "This is my third post.",
			"content_html": "<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\n<h2 id=\"code\" tabindex=\"-1\">Code <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/thirdpost/\">#</a></h2>\n<h3 id=\"styled-with-syntax\" tabindex=\"-1\">Styled (with Syntax) <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/thirdpost/\">#</a></h3>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// this is a command</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tcounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Test with a line break above this line.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"unstyled\" tabindex=\"-1\">Unstyled <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/thirdpost/\">#</a></h3>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<pre><code>// this is a command\nfunction myCommand() {\n\tlet counter = 0;\n\tcounter++;\n}\n\n// Test with a line break above this line.\nconsole.log('Test');\n</code></pre>\n<h2 id=\"section-header\" tabindex=\"-1\">Section Header <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/thirdpost/\">#</a></h2>\n<p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>\n",
			"date_published": "2018-08-24T00:00:00Z"
		}
		,
		{
			"id": "https://david-way.github.io/blog/secondpost/",
			"url": "https://david-way.github.io/blog/secondpost/",
			"title": "This is my second post with a much longer title.",
			"content_html": "<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\n<h2 id=\"section-header\" tabindex=\"-1\">Section Header <a class=\"header-anchor\" href=\"https://david-way.github.io/blog/secondpost/\">#</a></h2>\n<p><a href=\"https://david-way.github.io/blog/firstpost/\">First post</a>\n<a href=\"https://david-way.github.io/blog/thirdpost/\">Third post</a></p>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>\n",
			"date_published": "2018-07-04T00:00:00Z"
		}
		
	]
}

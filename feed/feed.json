{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "!important",
	"language": "en",
	"home_page_url": "https://david-way.github.io/",
	"feed_url": "https://david-way.github.io/feed/feed.json",
	"description": "I am writing about my not important experiences.",
	"author": {
		"name": "David Way",
		"url": "https://david-way.github.io/about-me/"
	},
	"items": [
		{
			"id": "https://david-way.github.io/blog/why-designers-should-learn-voice-over/",
			"url": "https://david-way.github.io/blog/why-designers-should-learn-voice-over/",
			"title": "Why designers should learn VoiceOver",
			"content_html": "<p>I used to watch our Quality Assurance (QA) Engineers with concern, confusion, and a mild sense of awe as they interrogated my implemented designs with their magical talking tools.</p>\n<p>When explaining why some cryptic combination of keys they were mashing was not resulting in the information or behavior they were expecting, I couldn't help but feel defeated.</p>\n<p>The first goal in the debugging process is to reproduce the bug; you need to know with certainty how to reproduce the bug to know for certain that you've solved the problem.</p>\n<p>Weary of the lengthy back and forth required to understand and resolve any issues this way, with a whole other (very patient) person in the loop, it was worth figuring out how to use a Screen Reader myself.</p>\n<p>I'm very grateful I did, as learning how to use these tools, how they worked, and the value they provide to a significant subset of our users has helped me to assess designs through a new lens.</p>\n<h2 id=\"what-is-voiceover-anyway\" tabindex=\"-1\">What is VoiceOver anyway? <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/why-designers-should-learn-voice-over/\">#</a></h2>\n<p>Voice Over is the Screen Reader built into Mac OS. A Screen Reader is a piece of assistive technology primarily used by people with vision impairments to consume written content online through audio or touch output.</p>\n<p></p><div class=\"c-inset-text\">\n<span>\nIt's worth noting that people with visual impairments aren't the only users of Screen Readers (3% of users report cognitive impairments, 2% have motor disabilities, and up to 12% have no disability at all.)\n</span>\n<div class=\"c-inset-text__link-container\"><a href=\"https://webaim.org/projects/screenreadersurvey8/\">Screen Reader User Survey</a></div>\n</div><p></p>\n<p>The experience of such a broad potential audience for our designs is vital to accommodate and understand and, as with most accessibility considerations, can help elevate the usability of our designs for all users.</p>\n<h2 id=\"how-does-a-screen-reader-work\" tabindex=\"-1\">How does a screen reader work? <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/why-designers-should-learn-voice-over/\">#</a></h2>\n<p>The HTML tags, the attributes we append to them, and how we nest and combine them imbue semantic meaning to our designs and the content we place inside them. HTML generates two things:</p>\n<ol>\n<li>GUI, rendered by browser</li>\n<li>Accessibility Tree, read by a Screen Reader</li>\n</ol>\n<figure class=\"u-bleed-container:medium\">\n  <picture><source type=\"image/avif\" srcset=\"https://david-way.github.io/img/F2sbTzdFu4-659.avif 659w\"><source type=\"image/webp\" srcset=\"https://david-way.github.io/img/F2sbTzdFu4-659.webp 659w\"><img alt=\"A diagram of an example accessibility tree, depicting the hierarchical relationship of HTML elements and the implicit information they supply to the screen reader, such as the elements locations, input type, name, and state.\" loading=\"lazy\" decoding=\"async\" src=\"https://david-way.github.io/img/F2sbTzdFu4-659.svg\" width=\"659\" height=\"383\"></picture>\n  <figcaption>A diagram of an example accessibility tree depicting the hierarchical relationship of HTML elements and the implicit information they supply to the screen reader, such as the elements' locations, input type, name, and state.</figcaption>\n</figure> \n<h3 id=\"visual-affordances\" tabindex=\"-1\">Visual affordances <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/why-designers-should-learn-voice-over/\">#</a></h3>\n<p>We're all familiar with affordances in design. An affordance is a compelling indicator of how an item on a page operates that includes its perceived and actual functions. Essentially, they are features that teach you how to use the functions or make them more intuitive.</p>\n<ul>\n<li>A handle on a teapot teaches you how to hold it, and the spout suggests what to do next.</li>\n<li>The underline of a link is an example of a convention-based affordance.</li>\n<li>Using a shopping cart icon to indicate the concept of online purchases would be a metaphorical affordance.</li>\n<li>Making buttons look 3D or clickable through copy, shape, and/or color is a crucial affordance.</li>\n</ul>\n<p>We rely heavily on visually available affordances to make our UI intuitive to non-screen reader users. However, these clues are not available to visually impaired users, so we need to provide equivalent information in non-visual methods.</p>\n<h3 id=\"non-visual-affordances\" tabindex=\"-1\">Non-visual affordances <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/why-designers-should-learn-voice-over/\">#</a></h3>\n<p>Semantic non-visual affordances required by Screen Readers are provided when using the correct HTML elements and attributes to render our UI. Semantics let us express the affordances we offer to sighted users in a way that a screen reader can announce.</p>\n<p>Semantics or meaning is given to content in a document through:</p>\n<ul>\n<li>Location in the DOM tree, for example, is it a parent, child, or sibling.</li>\n<li>Labelling, using headings, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\">aria attributes</a> or related label elements.</li>\n<li>Tag type or tag roles: is it a list, a button, or the sidebar of our site?</li>\n</ul>\n<h3 id=\"working-with-the-screen-reader\" tabindex=\"-1\">Working <em>with</em> the screen reader <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/why-designers-should-learn-voice-over/\">#</a></h3>\n<p>The following image illustrates two implementations of a page that could be styled to render with a visually identical result that would provide a significantly different experience for a sighted vs. a screen reader user.</p>\n<figure class=\"u-bleed-container:medium\">\n  <picture><source type=\"image/avif\" srcset=\"https://david-way.github.io/img/DGMMr-vfgk-656.avif 656w\"><source type=\"image/webp\" srcset=\"https://david-way.github.io/img/DGMMr-vfgk-656.webp 656w\"><img alt=\"A diagram displaying two HTML approaches to structure a page of content. One uses semantically correct tags, and the other achieves the same visual result but with only `div` tags.\" loading=\"lazy\" decoding=\"async\" src=\"https://david-way.github.io/img/DGMMr-vfgk-656.svg\" width=\"656\" height=\"382\"></picture>\n  <figcaption>A diagram displaying two HTML approaches to structure a page of content. One uses semantically correct tags, and the other achieves the same visual result but with only <code>div</code> tags.</figcaption>\n</figure>\n<p>Being aware of and using the appropriate HTML tags (along with their <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">implicit roles</a>) goes a long way to ensuring the content of your page is providing a usable experience for your screen reader users.</p>\n<p>Using ARIA attributes provides several additional mechanisms for adding labels, and descriptions and establishing relationships between elements when semantic HTML alone is insufficient.</p>\n<h3 id=\"this-sounds-like-a-lot\" tabindex=\"-1\">This sounds like a lot... <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/why-designers-should-learn-voice-over/\">#</a></h3>\n<p>Learning every <code>&lt;hmtl&gt;</code> element and attribute is obviously not a prerequisite to web design. Many tools can enable you to learn at the point of need and help you discover issues and resolve them as you go.</p>\n<p>Plenty of resources document common patterns and pitfalls with advice on keyboard interactions you should be aware of and the correct ARIA roles, states, and properties to use. A great example worthy of a bookmark is the (W3 ARIA Authoring Practices Guide (APG))[https://www.w3.org/WAI/ARIA/apg/patterns/].</p>\n<p>Being familiar with using a screen reader enables you to better assess the hidden content and practices you'll need to consider to make your designs a good experience for all your users.</p>\n<h4 id=\"a-simple-example\" tabindex=\"-1\">A simple example <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/why-designers-should-learn-voice-over/\">#</a></h4>\n<p>The following code illustrates two solutions to the icon button pattern. When using a visual element like an icon to label an action, it is important to provide the same non-visual descriptions.</p>\n<p>In <strong>Option A.</strong>, the inner <code>svg</code> image element is hidden from the accessibility tree due to the <code>aria-hidden</code> attribute. However, the equivalent text content of &quot;Menu&quot; has been provided using the <code>aria-label</code> attribute. This results in the screen reader announcing these elements as &quot;Menu button&quot;.</p>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Option A. --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Menu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> \n    <span class=\"token attr-name\">focusable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>m...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>An alternative technique, <strong>Option B.</strong>, delivers the same experience, this time using plain text inside a <code>span</code> element that has been visually hidden using a <code>CSS</code> class. The content of the <code>button</code> is still available to the screen reader.</p>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Option B. --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span>\n        <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">focusable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>m...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>visually-hidden<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        Menu\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre>\n<p></p><div class=\"c-inset-text\">\n<span>\nNote we didn't need to include the word &quot;button&quot;. The screen reader appends that content because of the implicit role of the <code>button</code> element.\n</span>\n</div><p></p>\n<p>If we had labeled the element as &quot;Menu button&quot;, a screen reader would annoyingly announce it as &quot;Menu button button&quot;. Navigating these subtle gotchas and conventions becomes second nature as you interact with a web document using a screen reader.</p>\n<h2 id=\"testing-designs-for-screen-reader-experience\" tabindex=\"-1\">Testing designs for screen reader experience <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/why-designers-should-learn-voice-over/\">#</a></h2>\n<p>Of course, nothing beats testing your designs with someone who primarily accesses the web through assistive technologies like screen readers. However, familiarizing yourself with the accessibility tools available, how to use a screen reader, and understanding how the screen reader conveys non-visual content will help you make better informed content, layout, and behavioral design.</p>\n<p>I have written a concise onboarding guide for designers to <a href=\"https://david-way.github.io/blog/how-to-get-started-with-voice-over\">learn the bare minimum to start testing designs with VoiceOver</a>, the Screen Reader built into MacOs.</p>\n<h3 id=\"references\" tabindex=\"-1\">References <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/why-designers-should-learn-voice-over/\">#</a></h3>\n<ul>\n<li><a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/\">W3 ARIA Authoring Practices Guide (APG)</a>.</li>\n<li><a href=\"https://www.deque.com/axe/devtools/chrome-browser-extension/\">axe DevTools browser extension</a>.</li>\n<li><a href=\"https://www.ibm.com/able/toolkit/tools\">IBM Equal Access Checker</a>.</li>\n<li>The <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/accessibility_inspector/\">Firefox</a> or <a href=\"https://developer.chrome.com/docs/devtools/accessibility/reference/#pane\">Chrome</a> accessibility inspector panel.</li>\n</ul>\n",
			"date_published": "2022-08-12T00:00:00Z"
		}
		,
		{
			"id": "https://david-way.github.io/blog/how-to-get-started-with-voice-over/",
			"url": "https://david-way.github.io/blog/how-to-get-started-with-voice-over/",
			"title": "How to get started with VoiceOver",
			"content_html": "<h2 id=\"how-to-use-a-screen-reader\" tabindex=\"-1\">How to use a screen reader <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/how-to-get-started-with-voice-over/\">#</a></h2>\n<p>System Settings &gt; Accessibility &gt; Voice Over &gt; Voice Over training (recommend 20 mins)</p>\n<p>How to:</p>\n<ul>\n<li>Turn if on/off: command + F5 (or on expanded keyboard, fn + command + F5)</li>\n<li>Issue Voice Over command: control + option (also referred to as the VO key, use middle and ring finger)</li>\n<li>Move around:\n<ul>\n<li>Next/Previous: VO + left/right arrow key</li>\n<li>Go into/Exit out of collection: VO + SHIFT + up/down arrow key (out of a table, into a panel like web page view)</li>\n<li>Simulate mouse click: (double) VO + SPACE</li>\n</ul>\n</li>\n<li>Heading skip:  VO + Command + H</li>\n<li>Interrupt Voice Over: control key</li>\n<li>Rotor/Uber key: VO + U</li>\n<li>Change rate in Voice Over Settings: Shift + control + option + command + arrow up/down (press and hold)</li>\n</ul>\n<p>Demo task:</p>\n<ul>\n<li>Using wikipedia, find out how many people were on the titanic</li>\n</ul>\n<h2 id=\"cheat-sheets\" tabindex=\"-1\">Cheat sheets <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/how-to-get-started-with-voice-over/\">#</a></h2>\n<h3 id=\"basic-commands\" tabindex=\"-1\">Basic commands <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/how-to-get-started-with-voice-over/\">#</a></h3>\n<figure class=\"u-bleed-container:medium\">\n<picture><source type=\"image/avif\" srcset=\"https://david-way.github.io/img/FcFZJ-HyBS-1208.avif 1208w\"><source type=\"image/webp\" srcset=\"https://david-way.github.io/img/FcFZJ-HyBS-1208.webp 1208w\"><img alt=\"A diagram displaying a list of 5 basic commands for VoiceOver, 1. Command + F5 to toggle VoiceOver on/off, 2. Command + Option, this combination is referred to as the VO key, 3. VO key + arrow left/right to navigate next/previous 4. VO key + Space to simulate a double mouse click,  5. VO + Shift + up/down arrow keys to Go into/Exit out of a region.\" loading=\"lazy\" decoding=\"async\" src=\"https://david-way.github.io/img/FcFZJ-HyBS-1208.svg\" width=\"1208\" height=\"621\"></picture>\n<figcaption>A diagram displaying a list of 5 basic commands for VoiceOver, 1. Command + F5 to toggle VoiceOver on/off, 2. Command + Option, this combination is referred to as the VO key, 3. VO key + arrow left/right to navigate next/previous 4. VO key + Space to simulate a double mouse click,  5. VO + Shift + up/down arrow keys to Go into/Exit out of a region.</figcaption>\n</figure>\n<h3 id=\"intermediate-commands\" tabindex=\"-1\">Intermediate commands <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/how-to-get-started-with-voice-over/\">#</a></h3>\n<figure class=\"u-bleed-container:medium\">\n<picture><source type=\"image/avif\" srcset=\"https://david-way.github.io/img/fq15oPrZnk-933.avif 933w\"><source type=\"image/webp\" srcset=\"https://david-way.github.io/img/fq15oPrZnk-933.webp 933w\"><img alt=\"A diagram displaying a list of 4 intermediate level commands for VoiceOver, 1. VO + Command + H to navigate through the heading elements on the page, a common method for skimming a page, 2. Control to interrupt VoiceOver output, 3. VO key + U open the Rotor quick menu 4. Shift + VO key + Command + to simulate a double mouse click,  5. VO + Shift + up/down arrow keys to adjust VoiceOver settings\" loading=\"lazy\" decoding=\"async\" src=\"https://david-way.github.io/img/fq15oPrZnk-933.svg\" width=\"933\" height=\"621\"></picture>\n<figcaption>A diagram displaying a list of 4 intermediate level commands for VoiceOver, 1. VO + Command + H to navigate through the heading elements on the page, a common method for skimming a page, 2. Control to interrupt VoiceOver output, 3. VO key + U open the Rotor quick menu 4. Shift + VO key + Command + to simulate a double mouse click,  5. VO + Shift + up/down arrow keys to adjust VoiceOver settings.</figcaption>\n</figure>",
			"date_published": "2022-08-12T00:00:00Z"
		}
		,
		{
			"id": "https://david-way.github.io/blog/ux-of-a-disabled-button/",
			"url": "https://david-way.github.io/blog/ux-of-a-disabled-button/",
			"title": "The User Experience of Disabled Buttons",
			"content_html": "<h2 id=\"should-you-use-disabled-buttons\" tabindex=\"-1\">Should you use disabled buttons? <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/ux-of-a-disabled-button/\">#</a></h2>\n<p>There are two reasons why disabling a button is best avoided.</p>\n<h3 id=\"1-state-identification\" tabindex=\"-1\">1. State Identification <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/ux-of-a-disabled-button/\">#</a></h3>\n<p>The difference between a disabled button and a regular button is usually very subtle<sup>*</sup>, meaning it's a weak indicator of state that may be missed by many of your users.</p>\n<p><i>* Designing something to look both disabled and identifiable as a button while achieving adequate contrast is tricky.</i></p>\n<h4 id=\"1-1-what-does-disabling-a-button-from-a-screen-readers-perspective-mean\" tabindex=\"-1\">1.1 What does disabling a button from a Screen Readers perspective mean? <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/ux-of-a-disabled-button/\">#</a></h4>\n<details>\n  <summary>ℹ️ What is a <i>Screen Reader</i>?</summary>\n<p>A screen reader is assistive software primarily used by people with low or no vision. It converts the semantic elements on a web page (for example, text, buttons, images, and links) into audible speech or braille.</p>\n</details>\n<p>A disabled button is non-existent to a Screen Reader user, meaning they don't even get the weak indicator afforded to fully sighted users.</p>\n<blockquote>\n<p>According to the <a href=\"https://www.who.int/en/news-room/fact-sheets/detail/blindness-and-visual-impairment\">World Health Organization</a>, there are an estimated 285 million people in the world who suffer from some level of visual impairment (including anyone from legally blind, to those with less than 20/20 vision).</p>\n</blockquote>\n<h3 id=\"2-unnecessary-cognitive-load\" tabindex=\"-1\">2. Unnecessary Cognitive Load <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/ux-of-a-disabled-button/\">#</a></h3>\n<p>When a disabled button is intended to act as a visual indicator that something on the page or form needs to be fixed/changed before your user can continue.\nTo those who can identify them, this usage of a disabled button tells them &quot;something&quot; is wrong and provides no more information on what needs to be corrected (the user may assume that something is wrong with the application and that it needs to be reloaded).</p>\n<p>The change required to re-enable a disabled control may be appear to be a simple puzzle for your user but this is an assumption we shouldn't make for all our users.\nIntroducing this, potentially, minor frustration for users with or without cognitive disabilities or even familiarity with our product is best avoided in keeping with the &quot;Don't make me think&quot; principle.</p>\n<p>Due to the contrast issues mentioned before, you can't rely on the contents of the buttons label to aid your user here, as they may not be able to read it.</p>\n<h2 id=\"is-there-another-way\" tabindex=\"-1\">Is there another way? <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/ux-of-a-disabled-button/\">#</a></h2>\n<p>There are more suitable patterns and approaches available that can help us avoid using disabled buttons.\nFor example, let's look at the typical approach of using a disabled button to prevent progress on an incomplete form.</p>\n<p>❌ Don't</p>\n<ul>\n<li>Disable the submit button (hoping your user understands that you mean for them to fully complete the form before continuing)</li>\n</ul>\n<p>✅ Do</p>\n<ul>\n<li>Mark all required fields (unless all fields are required or there are more optional fields than required)</li>\n<li>Let the user interact with and traverse the form and identify the enabled submit/continue button (both by its label and location)</li>\n<li>Let them attempt to submit the form</li>\n<li>Inform the user precisely what issue is preventing them from continuing. This can be an inline error message or something like the Toast alert pattern</li>\n</ul>\n<p>In other words, allow and use the user's premature interaction with the control as an opportunity to inform or guide them on how to continue.\nThis principle can be applied to many instances where disabled buttons are commonly used.</p>\n<!-- ## When should a disabled button be used\n\n![animation showing an asynchronous action triggered by a button temporarily disabling a button](https://raw.github.ibm.com/DWay/not-important/master/src/images/posts/ux-disabled-buttons/disable-button-pattern.gif) -->\n",
			"date_published": "2021-10-11T00:00:00Z"
		}
		,
		{
			"id": "https://david-way.github.io/blog/quick-start-guide-to-yaml/",
			"url": "https://david-way.github.io/blog/quick-start-guide-to-yaml/",
			"title": "Quick-start guide to using Yaml",
			"content_html": "<h2 id=\"definitions\" tabindex=\"-1\">Definitions <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<details>\n  <summary>What is a file really?</summary>\n<p>A <strong>file</strong> is and object on a computer that is used to store data or information.</p>\n<p>There are many types of files, recognisable by their extension (ie. <code>.doc</code>, <code>.pdf</code>, <code>.jpg</code>).\nDifferent file types are optimised for different tasks, like storing video, audio, text, configurations or computer instructions (code).</p>\n</details>\n<details>\n  <summary>What is a markup language?</summary>\n<p>A <strong>markup up language</strong> is a system of writing content so that it’s structure conveys meaning.</p>\n<p>Yaml is a data serialization language and not technically a markup language though it functions a lot like one.</p>\n<p>Other markup languages you might be familiar with are HTML, XML and JSON.</p>\n<p>When you compare Yaml structure to other similar systems Yaml requires considerably less content or &quot;decoration&quot; to carry the same amount of information, but is less resilient regarding spacing and formatting as a result.</p>\n<div class=\"u-responsive-table-container\">\n<table>\n  <thead>\n    <tr>\n      <th align=\"left\">Yaml</th>\n      <th align=\"left\">XML</th>\n      <th align=\"left\">JSON</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"vertical-align:top\">\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token key atrule\">People</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Bob\n    <span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>\n    <span class=\"token key atrule\">address</span><span class=\"token punctuation\">:</span> Wicklow<span class=\"token punctuation\">,</span> Ireland</code></pre>\n<p></p></td>\n<td style=\"vertical-align:top\"><p></p>\n<pre class=\"language-xml\" tabindex=\"0\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>People</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Person</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Bob<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>age</span><span class=\"token punctuation\">></span></span>30<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>age</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span><span class=\"token punctuation\">></span></span>Wicklow, Ireland<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>address</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Person</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>People</span><span class=\"token punctuation\">></span></span></code></pre>\n<p></p></td>\n<td style=\"vertical-align:top\"><p></p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"People\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"address\"</span><span class=\"token operator\">:</span> \"Wicklow<span class=\"token punctuation\">,</span> Ireland\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p></p></td>\n</tr><p></p>\n  </tbody>\n</table>\n</div>\n</details>\n<h2 id=\"yaml\" tabindex=\"-1\">Yaml <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<p>Yaml is a markup like language (used in the <code>.yaml</code> file type) that aims to make data portable in a way that is easy to read, write and edit by humans <em>and</em> computers.</p>\n<p>A Yaml document contains fields to store different types of data and aims to use compact formats to describe more complex data structures (eg. lists of items and maps).</p>\n<h2 id=\"yaml-structure\" tabindex=\"-1\">Yaml structure <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<p>The three dashes <code>---</code> are used to signal the start and end of a Yaml document.</p>\n<p>You structure a YAML document with white-spaces. This means indentation (spaces) and new lines are crucial to a correctly structured Yaml document (always use spaces not tabs). Unless otherwise indicated, newlines indicate the end of a field.</p>\n<h2 id=\"key-value-pairs\" tabindex=\"-1\">Key value pairs <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<p>The simplest and most common field you’ll see in a <code>.yaml</code> file is a key-value pair.</p>\n<p>Key-value pairs are used for labelling (the key) single pieces of data (the value), like a piece of text or a number.</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token punctuation\">---</span>\n<span class=\"token comment\"># Example of `key: value` pair</span>\n<span class=\"token comment\"># Note that a space after the colon is mandatory</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Joan smith\n<span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32</span>\n<span class=\"token punctuation\">---</span></code></pre>\n<details>\n  <summary markdown=\"span\">What is the value data of writing like this?</summary>\n<p>A computer can read and use structured data written a lot easier than the unstructured data, for example see the following:</p>\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">It's Joan Smiths 33rd birthday is tomorrow.</code></pre>\n<p>Again, the key aim of Yaml is to be portable, meaning that it can be easily imported, understood by multiple programs and in programming languages.</p>\n</details>\n<h2 id=\"blocks-of-text\" tabindex=\"-1\">Blocks of text <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<p>To store a literal block of text using the pipe (<code>|</code>) character. New lines are preserved within the block.</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token key atrule\">literal_block</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n  This entire block of text will be the value of the 'literal_block' key,\n  with line breaks being preserved.</span>\n\n  The literal continues until de<span class=\"token punctuation\">-</span>dented<span class=\"token punctuation\">,</span> and the leading indentation is\n  stripped.</code></pre>\n<h2 id=\"comments\" tabindex=\"-1\">Comments <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<p>Comments begin with a pound or hash sign (<code>#</code>). A comment is a programmer-readable explanation or annotation of data. It is ignored by the application.</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token comment\"># This is a full line comment, humans only... 🤖</span>\n<span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> value</code></pre>\n<h2 id=\"lists\" tabindex=\"-1\">Lists <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<p>List or arrays are lines that begin at the same indentation level, starting with a dash followed by a space. A list groups multiple values into the same field.</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token comment\"># Here is a list of names grouped into a \"name\" field</span>\n<span class=\"token key atrule\">names</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"Jane\"</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"John\"</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"Jill\"</span></code></pre>\n<p>or</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token comment\"># This is an alternative format to achieve the same thing.</span>\n<span class=\"token comment\"># Arrays are often represented using square brackets []</span>\n<span class=\"token key atrule\">names</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Jane\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jill\"</span><span class=\"token punctuation\">]</span></code></pre>\n<h2 id=\"dictionary-list\" tabindex=\"-1\">Dictionary List <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/quick-start-guide-to-yaml/\">#</a></h2>\n<p>A dictionary groups more complex values into a single field.</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token comment\"># This is a collection of two link fields</span>\n<span class=\"token comment\"># Each associated with its own label and url fields</span>\n<span class=\"token key atrule\">links</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Home\"</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./home\"</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"About\"</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/about\"</span></code></pre>\n",
			"date_published": "2021-04-07T00:00:00Z"
		}
		,
		{
			"id": "https://david-way.github.io/blog/journey-mapping-in-design-thinking/",
			"url": "https://david-way.github.io/blog/journey-mapping-in-design-thinking/",
			"title": "Journey mapping in the Design Thinking Process",
			"content_html": "<h2 id=\"journey-mapping\" tabindex=\"-1\">Journey mapping <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/journey-mapping-in-design-thinking/\">#</a></h2>\n<p>The goal of journey mapping is to get a holistic view of a customer's experience, understand the tasks and responsibilities currently assigned, and uncover moments of frustration and delight.\nSuccessfully journey mapping highlights opportunities to address customers' pain points, alleviate disconnected areas of the service you provide, create a better experience for your users, and aligns your team.</p>\n<h3 id=\"requirements\" tabindex=\"-1\">Requirements <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/journey-mapping-in-design-thinking/\">#</a></h3>\n<ol>\n<li>Journey maps are always helpful, but producing one with a known business goal is usually best. The business goal will inform the level of detail required, what the most impactful or common scenarios you are concerned with, and will be the one most likely to produce insights you're actually willing to work on.</li>\n<li>A list of potential users: Which personas do you need to include or be aware of?</li>\n</ol>\n<h3 id=\"steps\" tabindex=\"-1\">Steps <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/journey-mapping-in-design-thinking/\">#</a></h3>\n<ul>\n<li>Define a scope, choose an entry and exit to an end-to-end customer experience.</li>\n<li>Develop a persona or personas for the actor(s) involved in the experience by analyzing all available information, then conduct contextual inquiries (interviews) with users or Subject Matter Experts (SMEs), direct observation of product/service use, or collect data through surveys from users or potential users.</li>\n<li>Develop empathy maps for each identified persona to synthesize your team's knowledge about your users as a group.</li>\n<li>Identify journey phases - chunks of meaningful behavior that provide high-level organization of actions, thoughts, and emotions your user experiences.</li>\n<li>Sketch a journey in a format of step-by-step interaction.</li>\n<li>Identify touch points, the users interactions with the actual product and the business (support, sales, etc.). Who performs what?</li>\n<li>Match each touchpoint to each users actions, mindsets/emotions, intents, motivations, and pain points - the behaviours, thoughts, and feelings the actor has throughout the journey.</li>\n<li>Insights - Look for opportunities (along with additional context, such as ownership and metrics) for optimizing the experience.</li>\n<li>Validate your journey map, empathy maps, personas with more research.</li>\n</ul>\n<h2 id=\"where-journey-maps-fit-into-the-design-thinking-process\" tabindex=\"-1\">Where journey maps fit into the design thinking process <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/journey-mapping-in-design-thinking/\">#</a></h2>\n<p>A journey map helps identify your users, and their pain points and aligns your team's understanding of both.\nPain points and Empathy Maps help you and your team step into your users' shoes, and inform your user Need Statements.\nNeed statements help to guide your team's ideation sessions.\nIdeation leads to storyboarding, a new To-Be experience to be prototyped and validated with your users.</p>\n<h2 id=\"additional-references\" tabindex=\"-1\">Additional References <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/journey-mapping-in-design-thinking/\">#</a></h2>\n<ul>\n<li><a href=\"https://www.nngroup.com/articles/customer-journey-mapping/\">When and How to Create Customer Journey Maps - Nielsen Norman Group</a></li>\n<li><a href=\"https://www.nngroup.com/articles/journey-mapping-101/\">Journey Mapping 101 - Nielsen Norman Group</a></li>\n<li><a href=\"https://www.ibm.com/design/thinking/page/toolkit/activity/empathy-map\">Empathy Map toolkit - IBM Design</a></li>\n</ul>\n",
			"date_published": "2021-03-31T00:00:00Z"
		}
		,
		{
			"id": "https://david-way.github.io/blog/group-time-management/",
			"url": "https://david-way.github.io/blog/group-time-management/",
			"title": "A management tool to keep groups on time",
			"content_html": "<p>I'm not the most naturally gifted time manager in the world. Time management software and practices are an indispensable pillar of my day-to-day life. Time-blocking, Pomodoro timers, shared calendars, scheduled notifications, I've tried and relied on them all.</p>\n<p>Some of my recent favorite tools include <a href=\"https://ticktick.com/?language=en_US\">TickTick</a>, the <code>/remind me</code> command in <a href=\"https://slack.com/intl/en-ie/help/articles/208423427-Set-a-reminder\">Slack</a>, and any messaging app with scheduled send functionality!</p>\n<p>One area where time management can be extra challenging is when you're also managing other people's time, a familiar experience when running workshops.</p>\n<p>In the book <a href=\"http://www.gv.com/sprint/\">Design Sprints</a>, the author Jake Knapp recommends using a <a href=\"https://www.timetimer.com/\">time timer</a> (originally designed to help a child understand the abstract passage of time vivid and concrete way), as it is particularly effective at keeping participants on track and on time resulting in more efficient meetings.</p>\n<p>The value of the concept of a time timer was clear to me. Still, with the limitation of it being a physical object, I would have to remember to carry it with me, and it would be less useful in virtual workshops. I was looking for a personal project and had a free evening, so I decided to prototype a digital solution.</p>\n<h2 id=\"requirements\" tabindex=\"-1\">Requirements <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/group-time-management/\">#</a></h2>\n<p>The requirements I prioritized with my implementation were:</p>\n<ul>\n<li><strong>Tactile</strong> - The interaction should be discoverable, intuitive, and delightful. It should feel like you're using the physical equivalent.</li>\n<li><strong>Flexibility</strong> - I wanted to be able to make quick adjustments to the timer on the fly. There are always those moments when we could all do with an extra 30 seconds. The time to adjust the clock can't be longer than the extra time needed.</li>\n<li><strong>Light weight</strong> - Performance and accessibility are essential for any tool. In the middle of a workshop, you need to be able to get up and running quickly.\n<ul>\n<li>I decided to make this a Progressive Web App (PWA) so it can be installed locally, run offline, and have its own app icon on the device's home screen/taskbar for quick access.</li>\n<li>To save on bundle size and avoid requesting and serving an audio file, the web AudioContext API would be used to generate the audio or the alarm noise.</li>\n<li>I used <a href=\"https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk\">Light house</a> and <a href=\"https://pagespeed.web.dev/\">Google Page speed</a> tools to audit the performance and help with applying PWA best practices.</li>\n</ul>\n</li>\n</ul>\n<figure class=\"u-bleed-container:medium\">\n<picture><source type=\"image/avif\" srcset=\"https://david-way.github.io/img/NYVaksBTCi-942.avif 942w\"><source type=\"image/webp\" srcset=\"https://david-way.github.io/img/NYVaksBTCi-942.webp 942w\"><img alt=\"Page Speed score indicators, 98 Performance, 95 Accessibility, 100 Best Practices, 100 SEO 💪...\" loading=\"lazy\" decoding=\"async\" src=\"https://david-way.github.io/img/NYVaksBTCi-942.png\" width=\"942\" height=\"110\"></picture>\n<figcaption>\nThis was the first project I used a tool like <a href=\"https://pagespeed.web.dev/analysis/https-david-way-github-io-time-timer/xx8pnanrcb?form_factor=mobile\">Page Speed</a>.\n</figcaption>\n</figure>\n<h2 id=\"user-testing\" tabindex=\"-1\">User Testing <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/group-time-management/\">#</a></h2>\n<p>After deploying the first version I asked a few colleagues to test it. The feedback was positive but most felt that the direction you scroll the time dial could have been more intuitive. Users felt it should be a counterclockwise motion to add time and wind down clockwise. This was an easy fix and matched the design and intent of the original time timer.</p>\n<p>Additionally, users felt the relative change in size of the remaining time area was too small to notice when setting longer times and were unsure if the timer was running. To resolve this, I added a ripple animation to the border of the dial to indicate movement when the clock is &quot;ticking&quot; and a toggle switch to display the underlying countdown. Displaying the countdown by default would have been distracting, but having the option to show it helped reassure users the timer was running.</p>\n<h2 id=\"conclusion\" tabindex=\"-1\">Conclusion <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/group-time-management/\">#</a></h2>\n<p>This was a short but rewarding side project that was a great opportunity the explore some new development tools and techniques.</p>\n<div class=\"u-bleed-container:x-small\">\n<div class=\"u-border:device\">\n<picture><source type=\"image/avif\" srcset=\"https://david-way.github.io/img/R0x9cmX54M-388.avif 388w\"><source type=\"image/gif\" srcset=\"https://david-way.github.io/img/R0x9cmX54M-388.gif 388w\"><img alt=\"Product preview animation\" loading=\"lazy\" decoding=\"async\" src=\"https://david-way.github.io/img/R0x9cmX54M-388.webp\" width=\"388\" height=\"844\"></picture>\n</div>\n<figcaption>\n    A year later and this is still a tool I frequently reach for, so feel free to try out the <a href=\"https://david-way.github.io/time-timer/\">time timer web app</a> if it might be helpful to you too.\n</figcaption>\n</div>\n",
			"date_published": "2021-02-15T00:00:00Z"
		}
		,
		{
			"id": "https://david-way.github.io/blog/how-to-trick-rocks-into-doing-math/",
			"url": "https://david-way.github.io/blog/how-to-trick-rocks-into-doing-math/",
			"title": "How to trick rocks into doing math",
			"content_html": "<p><em>Or</em>, how CPUs are made.</p>\n<h3 id=\"computer-aided-design-cad\" tabindex=\"-1\">Computer-Aided Design (CAD) <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/how-to-trick-rocks-into-doing-math/\">#</a></h3>\n<p>The first step of designing a CPU is to select an instruction set and execution paradigm (referred to as the micro-architecture of the CPU). The micro-architecture for a specific application (for example, general-purpose consumer use, enterprise-grade, scientific computing, or embedded system) and a suitable performance level.</p>\n<p>The implementation logic of the CPU is constructed by abstract specification of desired circuit behavior\nthrough the selection of appropriate components e.g. Arithmetic Logic Units (ALU), registers, and cache memory and clocks.\nThe CAD software translates these specifications into the required circuits, logic devices, and logic gates and ultimately the transistors that make them. These elements are printed, in layers, to the silicone. The design is also analyzed and simulated to assess manufacturability and design integrity.</p>\n<h3 id=\"masking-and-fabrication\" tabindex=\"-1\">Masking and Fabrication <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/how-to-trick-rocks-into-doing-math/\">#</a></h3>\n<p>Manufacturing transistors, at the required scale and precision the achieve the modern CPU performance levels, is not possible with typical manufacturing processes. Even the most precise 3D printers are not suitable for the nano-metre scale of today’s chips. Photolithography is a multi-step process of using light to print or etch the design of many chips onto a thin silicon wafer.</p>\n<p>The printing process begins in a sterile environment by applying hydrogen peroxide to a substrate to remove any contaminants. A thin layer of silicon is deposited on the substrate and spun to uniformly cover it in another layer of photo-resistant chemical which is then baked into place. This layer is less than 2 micro-metres thick. A photo mask of the chip design is placed above the wafer and an extreme intensity UV light source is focused through it. This projects an image of the design that exposes and chemically alters the photoresist where the light reaches it. The photoresist is then treated to develop the exposed regions, preventing further light-induced alteration, and washed away from the unexposed regions. A chemical is used to remove the uppermost layer of the substrate not covered by the photoresist mask, etching the design into the wafer. The photoresist is removed, the surface is polished, and the process is repeated in as many layers as needed to complete the chip design.</p>\n<h2 id=\"packaging\" tabindex=\"-1\">Packaging <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/how-to-trick-rocks-into-doing-math/\">#</a></h2>\n<p>The delicate silicone die added to a carrier is attached to the printed circuit board (PCB) allowing it to connect, via a pin and socket, to the rest of the computer system. A heat-spreading component is mounted on top to transfer heat away from the circuits.</p>\n<h2 id=\"testing-and-binning\" tabindex=\"-1\">Testing and Binning <a class=\"c-header-anchor\" href=\"https://david-way.github.io/blog/how-to-trick-rocks-into-doing-math/\">#</a></h2>\n<p>CPUs are very complex and rely on an incredible level of precision on a microscopic scale. A lot of effort is put into avoiding defects but when they do occur, binning is used to mitigate waste. If the defect occurs in a redundant or non-essential component of the CPU like a core, that component is disabled and the CPU is sold as a lower-end part.</p>\n<p>The CPUs are then packaged for retail to customers or sold to OEMs for inclusion in their products.</p>\n",
			"date_published": "2020-07-07T00:00:00Z"
		}
		
	]
}
